<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:context="http://www.springframework.org/schema/context" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:sfdc-analytics="http://www.mulesoft.org/schema/mule/sfdc-analytics" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/sfdc-analytics http://www.mulesoft.org/schema/mule/sfdc-analytics/current/mule-sfdc-analytics.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/db:abstract-reconnection-strategy http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    
    <configuration doc:name="Configuration">
	  <expression-language>
	    <global-functions>
	      def convertDate(strDate){
	      
	      	import java.util.Date;
			import java.text.SimpleDateFormat;
			import java.util.TimeZone;
			
			Date tempDate = null;
			
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yy hh.mm.ss.SSSSSSS a");
			//sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
			
			tempDate = sdf.parse(strDate);
			
			return  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(tempDate);
          }
	    </global-functions>
	  </expression-language>
	</configuration>



			

                 
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <sfdc-analytics:config name="Salesforce_Analytics_Cloud__Basic_authentication" username="naveen-raju@bisk.com.skywaydev" password="Vishal3@" securityToken="7tLyrkxlkSeaxhNTXAkB2c39u" url="https://test.salesforce.com/services/Soap/u/31.0" metadataFileName="test.json" doc:name="Salesforce Analytics Cloud: Basic authentication">
        <reconnect-forever/>
    </sfdc-analytics:config>
    <file:connector name="File" readFromDirectory="C:\Bisk\Wave\upload" autoDelete="false" streaming="false" validateConnections="true" doc:name="File"/>
    <context:property-placeholder location="dev.properties"/>
    
    <spring:beans>
    <spring:bean id="dbcp_dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" name="dbcp_dataSource">
        <spring:property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
        <spring:property name="url" value="jdbc:sqlserver://${db.host}/${db.databasename}"/>
        <spring:property name="username" value="${db.username}"/>
        <spring:property name="password" value="${db.password}"/>
    </spring:bean>
    
    <spring:bean id="employeeDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close" name="Bean">
	        <spring:property name="driverClass" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
	        <spring:property name="jdbcUrl" value="jdbc:sqlserver://${db.host}/${db.databasename}" />
	        <spring:property name="user" value="${db.username}" />
	        <spring:property name="password" value="${db.password}" />
<!-- 	        <spring:property name="maxPoolSize" value="10" /> -->
<!-- 	        <spring:property name="minPoolSize" value="3" /> -->
<!-- 	        <spring:property name="maxStatements" value="150" /> -->
	        <spring:property name="testConnectionOnCheckout" value="false" />
    </spring:bean>
    </spring:beans>
    
    <db:generic-config name="Generic_Database_Configuration" dataSource-ref="employeeDataSource" doc:name="Generic Database Configuration"/>
    <db:generic-config name="Generic_db" url="jdbc:sqlserver://${db.host};database=${db.databasename};user=${db.username};password=${db.password}" driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver" doc:name="Generic Database Configuration"/>
    <flow name="look-ups">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/dw" doc:name="HTTP"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload.responses map ((values, index) ->
{
	ResponseID: values.ResponseID,
	inserted : lookup("demoFlow6",values)
  
	
})]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="demoFlow6">
        <expression-component doc:name="Expression"><![CDATA[flowVars.new_payload = new java.util.ArrayList();
new_payload.add(payload);]]></expression-component>
        <logger level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="global-functions">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="1" timeUnit="MINUTES"/>
            <logger message="date" level="INFO" doc:name="Logger"/>
        </poll>
        <set-variable variableName="datee" value="#['08-DEC-14 07.04.17.000000 PM']" doc:name="Variable"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%var parseDate = (dateStr) -> (dateStr as :datetime {format: "yyyy-MM-dd HH:mm:ssZ"}) 

--- 
{
	//TASK_ID: payload.transaction.task.id as :number   when (payload.transaction.task.id != null) otherwise payload.transaction.task.id,
	//(ACTUAL_START_DATE: payload.transaction.task.actualStartDate as :datetime {format: "yyyy-MM-dd'T'HH:mm:ssZ"}) when  payload.transaction.task.actualStartDate != null,
	//ACTUAL_START_DATE: convertDate(payload.transaction.task.actualStartDate as :string) when  payload.transaction.task.actualStartDate != null otherwise payload.transaction.task.actualStartDate,
	t: convertDate(flowVars['datee']),
	//t: 	parseDate("2014-01-01 14:00:00-08:00" as :string),
	cancellation_code: null
}
]]></dw:set-payload>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger" message="dateee : #[groovy:message.getPayloadForLogging()]"/>
    </flow>
    <flow name="demoFlow2">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/header" doc:name="HTTP"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[flowVars.prop = message.getInboundProperty("clear-cache") == null? "" : message.getInboundProperty("clear-cache")]]></scripting:script>
        </scripting:component>
        <logger message="#[flowVars.prop]" level="INFO" doc:name="Logger"/>
<!--         message.inboundProperties.'clear-cache' -->
        
    </flow>

    
<!--      <spring:beans> -->
<!-- 	    <spring:bean id="DataSource" class="com.mchange.v2.c3p0.DriverManagerDataSource" > -->
<!-- 	        <spring:property name="driverClass" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" /> -->
<!-- 	        <spring:property name="jdbcUrl" value="jdbc:sqlserver://${db.host}/${db.databasename}"  /> -->
<!-- 	        <spring:property name="user" value="${db.username}" /> -->
<!-- 	        <spring:property name="password" value="${db.password}" /> -->
<!--    	        <spring:property name="maxPoolSize" value="50" /> --> 
<!--    	        <spring:property name="minPoolSize" value="5" /> -->  
<!-- 	    </spring:bean> -->
<!--    </spring:beans> -->
<!--     <db:generic-config name="Generic_Database_Configuration2" dataSource-ref="DataSource" doc:name="Generic Database Configuration"/> -->
    
    <flow name="demoFlow12">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="5000" timeUnit="DAYS" startDelay="100"/>
            <logger message="start" level="INFO" doc:name="Logger"/>
        </poll>
        <db:select config-ref="Generic_db" doc:name="Database">
            <db:dynamic-query><![CDATA[SELECT TOP 1000 [CourseTypeID]
       ,[CourseTypeName] 
       ,[CourseTypeDescription] 
       ,[DateCreated] 
   FROM [BiskCommon].[dbo].[CourseType]]]></db:dynamic-query>


        </db:select>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import java.util.ArrayList

ArrayList finalArr = new ArrayList()
ArrayList finalArr_full = new ArrayList()

def a= 7206246
def b= '7206246'

if (a.toString()==b)
{
println 'in if condition'
}


]]></scripting:script>
        </scripting:component>
        
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="demoFlow4">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="5000" startDelay="550" timeUnit="HOURS"/>
            <logger message="Send email" level="INFO" doc:name="Logger"/>
        </poll>
        <set-property propertyName="mailinglist_id" value="#['2322222']" doc:name="Property"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
outboundProperties['mailinglist_id'] ++ '~' ++ 'asdfasfas' as :string]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </flow>
    
    
    <flow name="demoFlow1">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="1000" startDelay="100" timeUnit="DAYS"/>
            <db:select config-ref="Generic_db" doc:name="Database">
                <db:parameterized-query><![CDATA[select top 10 DivisionTypeID,DivisionTypeName,
DateCreated from DivisionType]]></db:parameterized-query>

            </db:select>
        </poll>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---

//DivisionTypeID,DivisionTypeName,DateCreated

payload map ((resultSet1 , indexOfResultSet1) -> { 

 	ID: resultSet1.DivisionTypeID, 
 	Name: resultSet1.DivisionTypeName ++ "===" ++ (now.year + 1) when (resultSet1.DivisionTypeID == 3) otherwise ("2010"), 
 	Amount: resultSet1.DateCreated as :string
 	//(CloseDate: resultSet1.CloseDate as :date {format: "M/dd/yyyy"} when (resultSet1.CloseDate != null and resultSet1.CloseDate != "" ) otherwise null ) 
  	//Distance: resultSet1.Distance,  
 	//Currencies: resultSet1.Currencies 
 	//,CreationDate: resultSet1.CreationDate 
 	//, 
 	//BiskKey__c: "INV-" ++ resultSet1.Id ++ "-" ++ resultSet1.CreationDate as :date {format: "M/dd/yyyy"} as :string {format: "yyyyMMdd"} 
	
 	//BiskKey__c: ("INV-" ++ resultSet1.Id ++ "-" ++ trim resultSet1.CreationDate as :date {format: "M/dd/yyyy"} as :string {format: "yyyyMMdd"}) 
 	//		when (resultSet1.CreationDate != null and resultSet1.CreationDate !="")  
 	//	otherwise ("INV-" ++ trim resultSet1.Year ++ "-"), 
		
 	//accountId : resultSet1.Id 
 	//	when (resultSet1.CreationDate != null  
 	//			and resultSet1.CreationDate !="")  
 	//	otherwise resultSet1.Year 
	
 })
 ]]></dw:set-payload>
        </dw:transform-message>

        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </flow>

    <flow name="demoFlow">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="1000" timeUnit="DAYS" startDelay="120"/>
            <logger level="INFO" doc:name="Logger"/>
        </poll>
        <file:outbound-endpoint path="C:\Bisk\Wave\upload" connector-ref="File" responseTimeout="10000" doc:name="File"/>

        <logger level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
 %output application/java 
 ---
 payload map ((resultSet1 , indexOfResultSet1) -> { 

 	ID: resultSet1.Id, 
 	Name: resultSet1.Name, 
 	Amount: resultSet1.Amount, 
 	(CloseDate: resultSet1.CloseDate as :date {format: "M/dd/yyyy"} when (resultSet1.CloseDate != null and resultSet1.CloseDate != "" ) otherwise null ) 
  	//Distance: resultSet1.Distance,  
 	//Currencies: resultSet1.Currencies 
 	//,CreationDate: resultSet1.CreationDate 
 	//, 
 	//BiskKey__c: "INV-" ++ resultSet1.Id ++ "-" ++ resultSet1.CreationDate as :date {format: "M/dd/yyyy"} as :string {format: "yyyyMMdd"} 
	
 	//BiskKey__c: ("INV-" ++ resultSet1.Id ++ "-" ++ trim resultSet1.CreationDate as :date {format: "M/dd/yyyy"} as :string {format: "yyyyMMdd"}) 
 	//		when (resultSet1.CreationDate != null and resultSet1.CreationDate !="")  
 	//	otherwise ("INV-" ++ trim resultSet1.Year ++ "-"), 
		
 	//accountId : resultSet1.Id 
 	//	when (resultSet1.CreationDate != null  
 	//			and resultSet1.CreationDate !="")  
 	//	otherwise resultSet1.Year 
	
 })]]></dw:set-payload></dw:transform-message>
      <logger level="DEBUG" doc:name="Logger" message="#[groovy:message.getPayloadForLogging()]"/>  
        <sfdc-analytics:upload-external-data-into-new-data-set-and-start-processing config-ref="Salesforce_Analytics_Cloud__Basic_authentication" type="recordId" operation="UPSERT" description="DEMO" label="demo" dataSetName="demo_test" doc:name="Salesforce Analytics Cloud">
            <sfdc-analytics:payload ref="#[payload]"/>
        </sfdc-analytics:upload-external-data-into-new-data-set-and-start-processing>

        <component class="demo.SFAnalytics" doc:name="Java"/>
        <base64-encoder-transformer name="base64encoder"   />
        <object-to-byte-array-transformer doc:name="Object to Byte Array"/>

        
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>


        <byte-array-to-string-transformer doc:name="Byte Array to String"/>


        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
 %output application/json 
---
 { 
 	//ouput: payload.fld1 ++ payload.fld2 as :date {format: "M/dd/yyyy"} as :string {format: "yyyyMMdd"} 
 	ouput: payload.fld1 ++ payload.fld2 as :date {format: "yyyyMMdd"} as :string {format: "yyyyMMdd"} 
	
 }]]></dw:set-payload></dw:transform-message>

        
        
    </flow>
</mule>
